name: Build & Package Solver

on:
  push:
    branches: [main]
    tags:
      - 'v*' # Например, v1.0.0
  pull_request:
    branches: [main]

jobs:
  # Базовая сборка на разных платформах
  build-linux-gcc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install GCC
        run: sudo apt-get update && sudo apt-get install -y g++ cmake make
      - name: Configure
        run: cmake -B build -S .
      - name: Build
        run: cmake --build build --parallel

  build-windows-msvc:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure
        run: cmake -B build -S . -G "Visual Studio 17 2022" -A x64
      - name: Build
        run: cmake --build build --config Release -- /m

  build-macos-clang:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure
        run: cmake -B build -S .
      - name: Build
        run: cmake --build build --parallel

  # Сборка пакетов при пуше тега
  release-all:
    if: startsWith(github.ref, 'refs/tags/v')
    needs:
      - build-linux-gcc
      - build-windows-msvc
      - build-macos-clang
    strategy:
      matrix:
        config:
          - os: ubuntu-latest
            generators: "TGZ;ZIP;DEB;RPM"
          - os: windows-latest
            generators: "WIX"
            installer: msi
          - os: macos-latest
            generators: "DMG"
            installer: dmg
    runs-on: ${{ matrix.config.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup CMake
        uses: lukka/get-cmake@v4.8.0

      - name: Install dependencies (macOS)
        if: ${{ matrix.config.os == 'macos-latest' }}
        run: |
          brew install --cask osxfuse
          brew install create-dmg

      - name: Configure with CPack
        run: |
          mkdir -p build && cd build
          cmake -DCPACK_GENERATOR=${{ matrix.config.generators }} ..

      - name: Build packages
        run: |
          cd build
          cpack

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.config.os }}
          path: build/*

      - name: Create GitHub Release
        id: create_release
        if: ${{ github.run_number == 1 }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        if: ${{ matrix.config.installer }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/solver-*.${{ matrix.config.installer }}
          asset_name: solver-${{ matrix.config.os }}.${{ matrix.config.installer }}
          asset_content_type: application/octet-stream
