name: CMake CI and Release

on:
  push:
    branches: [main]
    tags:
      - 'v*' # Запускать при пуше тега вроде v1.0.0
  pull_request:
    branches: [main]

jobs:
  build-linux-gcc:
    runs-on: ubuntu-latest
    name: Linux GCC Build
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y g++ cmake make
      - name: Configure CMake
        run: cmake -B build -S .
      - name: Build
        run: cmake --build build --parallel

  build-linux-clang:
    runs-on: ubuntu-latest
    name: Linux Clang Build
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y clang cmake make
      - name: Configure CMake
        run: cmake -B build -S .
      - name: Build
        run: cmake --build build --parallel

  build-windows-msvc:
    runs-on: windows-latest
    strategy:
      matrix:
        config: [Debug, Release]
    name: Windows MSVC Build
    steps:
      - uses: actions/checkout@v4
      - name: Configure CMake
        run: cmake -B build -S . -G "Visual Studio 17 2022" -A x64
      - name: Build
        run: cmake --build build --config ${{ matrix.config }} -- /m

  build-macos-clang:
    runs-on: macos-latest
    name: macOS Clang Build
    steps:
      - uses: actions/checkout@v4
      - name: Configure CMake
        run: cmake -B build -S .
      - name: Build
        run: cmake --build build --parallel

  release-package:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs:
      - build-linux-gcc
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup CMake
        uses: lukka/get-cmake@v4.8.0

      - name: Configure CMake
        run: |
          mkdir build && cd build
          cmake ..

      - name: Build project
        run: |
          cd build
          make

      - name: Run CPack to generate packages
        run: |
          cd build
          cpack

      - name: Upload artifacts (packages)
        uses: actions/upload-artifact@v4
        with:
          name: solver-release-packages
          path: |
            build/*.tar.gz
            build/*.zip
            build/*.deb
            build/*.rpm

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/solver-1.0.0-Linux.deb
          asset_name: solver-1.0.0-Linux.deb
          asset_content_type: application/vnd.debian.binary-package
release-msi:
  if: startsWith(github.ref, 'refs/tags/v')
  runs-on: windows-latest
  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup CMake
      uses: lukka/get-cmake@v4.8.0

    - name: Configure
      run: |
        mkdir build && cd build
        cmake ..

    - name: Build & Package with CPack
      run: |
        cd build
        cpack

    - name: Upload MSI
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/solver-*.msi
        asset_name: solver-installer.msi
        asset_content_type: application/octet-stream
release-dmg:
  if: startsWith(github.ref, 'refs/tags/v')
  runs-on: macos-latest
  steps:
    - name: Install create-dmg
      run: brew install --cask osxfuse && brew install create-dmg

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup CMake
      uses: lukka/get-cmake@v4.8.0

    - name: Configure
      run: |
        mkdir build && cd build
        cmake ..

    - name: Build & Package with CPack
      run: |
        cd build
        cpack

    - name: Upload DMG
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/solver-*.dmg
        asset_name: solver-installer.dmg
        asset_content_type: application/octet-stream
