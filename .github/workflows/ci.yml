name: Build and Package Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-release:
    name: Build and Package Solver for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install CMake (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake

      - name: Install CMake (Windows)
        if: matrix.os == 'windows-latest'
        timeout-minutes: 5
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y --no-progress

      - name: Install CMake (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install --formula cmake

      - name: Configure CMake (Linux and macOS)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir build && cd build
          cmake ..
          
      - name: Configure CMake (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir build
          cd build
          cmake -G "Visual Studio 17 2022" -A x64 ..

      - name: Build solver
        run: |
          cd build
          cmake --build . --target solver --config Release

      - name: Create source archives (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          git archive --format=tar.gz --prefix=solver-${VERSION}/ -o solver-src-${VERSION}.tar.gz HEAD
          git archive --format=zip --prefix=solver-${VERSION}/ -o solver-src-${VERSION}.zip HEAD

      - name: Package for Linux (.deb, .rpm)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd build
          cpack -G DEB RPM

      - name: Package for Windows (.msi)
        if: matrix.os == 'windows-latest'
        run: |
          cd build
          Remove-Item -Recurse -Force _CPack_Packages
          cpack -G WIX --verbose   # Запуск с выводом логов для отладки
      - name: Package for macOS (.dmg)
        if: matrix.os == 'macos-latest'
        run: |
          cd build
          cpack -G DragNDrop

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ matrix.os }}
          path: |
            solver-src-*.tar.gz
            solver-src-*.zip
            build/*.deb
            build/*.rpm
            build/*.msi
            build/*.dmg

  create-github-release:
    needs: build-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Source Tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/release-artifacts-ubuntu-latest/solver-src-${{ github.ref_name }}.tar.gz
          asset_name: solver-src-${{ github.ref_name }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Source Zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/release-artifacts-ubuntu-latest/solver-src-${{ github.ref_name }}.zip
          asset_name: solver-src-${{ github.ref_name }}.zip
          asset_content_type: application/zip

      - name: Upload Linux DEB
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/release-artifacts-ubuntu-latest/build/solver-*.deb
          asset_name: solver.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload Linux RPM
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/release-artifacts-ubuntu-latest/build/solver-*.rpm
          asset_name: solver.rpm
          asset_content_type: application/x-rpm

      - name: Upload Windows MSI
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/release-artifacts-windows-latest/build/solver-*.msi
          asset_name: solver.msi
          asset_content_type: application/octet-stream

      - name: Upload macOS DMG
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/release-artifacts-macos-latest/build/solver-*.dmg
          asset_name: solver.dmg
          asset_content_type: application/octet-stream
